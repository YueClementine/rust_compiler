------ TOKENS ------
fn WITH TYPE FN col:1 row:1
main WITH TYPE IDENTIFIER col:4 row:1
( WITH TYPE LPAR col:8 row:1
) WITH TYPE RPAR col:9 row:1
{ WITH TYPE LBRACE col:10 row:1
let WITH TYPE LET col:2 row:2
a WITH TYPE IDENTIFIER col:6 row:2
= WITH TYPE SET col:8 row:2
1 WITH TYPE NUMBER col:10 row:2
; WITH TYPE SEMICOLON col:11 row:2
let WITH TYPE LET col:2 row:3
b WITH TYPE IDENTIFIER col:6 row:3
= WITH TYPE SET col:8 row:3
1 WITH TYPE NUMBER col:10 row:3
; WITH TYPE SEMICOLON col:11 row:3
let WITH TYPE LET col:2 row:4
c WITH TYPE IDENTIFIER col:6 row:4
= WITH TYPE SET col:8 row:4
'a' WITH TYPE CHARACTER col:10 row:4
; WITH TYPE SEMICOLON col:13 row:4
println! WITH TYPE PRINTLN col:3 row:5
( WITH TYPE LPAR col:11 row:5
" WITH TYPE QUOTES col:12 row:5
aasd WITH TYPE IDENTIFIER col:13 row:5
" WITH TYPE QUOTES col:17 row:5
) WITH TYPE RPAR col:18 row:5
; WITH TYPE SEMICOLON col:19 row:5
// WITH TYPE COMMENT col:2 row:6
if WITH TYPE IF col:2 row:7
a WITH TYPE IDENTIFIER col:5 row:7
== WITH TYPE EQUALITY col:6 row:7
1 WITH TYPE NUMBER col:8 row:7
{ WITH TYPE LBRACE col:10 row:7
// WITH TYPE COMMENT col:2 row:8
// WITH TYPE COMMENT col:2 row:9
a WITH TYPE IDENTIFIER col:3 row:10
= WITH TYPE SET col:4 row:10
5 WITH TYPE NUMBER col:5 row:10
+ WITH TYPE PLUS col:6 row:10
6 WITH TYPE NUMBER col:7 row:10
* WITH TYPE STAR col:8 row:10
3 WITH TYPE NUMBER col:9 row:10
; WITH TYPE SEMICOLON col:10 row:10
b WITH TYPE IDENTIFIER col:3 row:11
= WITH TYPE SET col:4 row:11
a WITH TYPE IDENTIFIER col:5 row:11
* WITH TYPE STAR col:6 row:11
( WITH TYPE LPAR col:7 row:11
3 WITH TYPE NUMBER col:8 row:11
+ WITH TYPE PLUS col:9 row:11
6 WITH TYPE NUMBER col:10 row:11
) WITH TYPE RPAR col:11 row:11
; WITH TYPE SEMICOLON col:12 row:11
} WITH TYPE RBRACE col:2 row:12
} WITH TYPE RBRACE col:1 row:14

------ AST ------
+-Program
  +-FunctionDefinitions
    +-FunctionIdentifier
      +-TOKEN (fn)
      +-Identifier (main)
      +-TOKEN (()
      +-ParameterList
      +-BlockExpression
        +-TOKEN ({)
        +-Statements
          +-Statement
            +-DeclarationStatement
              +-TOKEN (let)
              +-VariableDefinition
                +-Variable (a)
              +-TOKEN (=)
              +-DeclarationRightStatement
                +-BinaryExpression
                  +-LHS
                    +-PrimaryExpression
                      +-LiteralExpression
                        +-INTEGER_LITERAL (1)
          +-TOKEN (;)
          +-Statement
            +-DeclarationStatement
              +-TOKEN (let)
              +-VariableDefinition
                +-Variable (b)
              +-TOKEN (=)
              +-DeclarationRightStatement
                +-BinaryExpression
                  +-LHS
                    +-PrimaryExpression
                      +-LiteralExpression
                        +-INTEGER_LITERAL (1)
          +-TOKEN (;)
          +-Statement
            +-DeclarationStatement
              +-TOKEN (let)
              +-VariableDefinition
                +-Variable (c)
              +-TOKEN (=)
              +-DeclarationRightStatement
                +-BinaryExpression
                  +-LHS
                    +-PrimaryExpression
                      +-LiteralExpression
                        +-CHAR_STR_LITERAL ('a')
          +-TOKEN (;)
          +-Statement
            +-PRINTLN
              +-TOKEN (println!)
              +-TOKEN (()
              +-TOKEN (")
              +-TOKEN (")
              +-TOKEN ())
          +-TOKEN (;)
          +-COMMENT
            +-TOKEN (//)
          +-IfExpression
            +-TOKEN (if)
            +-ConditionStatement
              +-BinaryExpression
                +-LHS
                  +-PrimaryExpression
                    +-Variable (a)
                +-OP (==)
                +-RHS
                  +-PrimaryExpression
                    +-LiteralExpression
                      +-INTEGER_LITERAL (1)
            +-BlockExpression
              +-TOKEN ({)
              +-Statements
                +-COMMENT
                  +-TOKEN (//)
                +-COMMENT
                  +-TOKEN (//)
                +-Statement
                  +-AssignmentExpression
                    +-Variable (a)
                    +-AssignmentOperator (=)
                    +-BinaryExpression
                      +-LHS
                        +-PrimaryExpression
                          +-LiteralExpression
                            +-INTEGER_LITERAL (5)
                      +-OP (+)
                      +-RHS
                        +-LHS
                          +-PrimaryExpression
                            +-LiteralExpression
                              +-INTEGER_LITERAL (6)
                        +-OP (*)
                        +-RHS
                          +-PrimaryExpression
                            +-LiteralExpression
                              +-INTEGER_LITERAL (3)
                +-TOKEN (;)
                +-Statement
                  +-AssignmentExpression
                    +-Variable (b)
                    +-AssignmentOperator (=)
                    +-BinaryExpression
                      +-LHS
                        +-PrimaryExpression
                          +-Variable (a)
                      +-OP (*)
                      +-RHS
                        +-PrimaryExpression
                          +-TOKEN (()
                          +-BinaryExpression
                            +-LHS
                              +-PrimaryExpression
                                +-LiteralExpression
                                  +-INTEGER_LITERAL (3)
                            +-OP (+)
                            +-RHS
                              +-PrimaryExpression
                                +-LiteralExpression
                                  +-INTEGER_LITERAL (6)
                          +-TOKEN ())
                +-TOKEN (;)
              +-TOKEN (})
        +-TOKEN (})

------ TOKENS ------
fn WITH TYPE FN col:1 row:1
main WITH TYPE IDENTIFIER col:4 row:1
( WITH TYPE LPAR col:8 row:1
) WITH TYPE RPAR col:9 row:1
{ WITH TYPE LBRACE col:10 row:1
let WITH TYPE LET col:2 row:2
a WITH TYPE IDENTIFIER col:6 row:2
= WITH TYPE SET col:8 row:2
1 WITH TYPE NUMBER col:10 row:2
; WITH TYPE SEMICOLON col:11 row:2
let WITH TYPE LET col:2 row:3
b WITH TYPE IDENTIFIER col:6 row:3
= WITH TYPE SET col:8 row:3
1 WITH TYPE NUMBER col:10 row:3
; WITH TYPE SEMICOLON col:11 row:3
let WITH TYPE LET col:2 row:4
c WITH TYPE IDENTIFIER col:6 row:4
= WITH TYPE SET col:8 row:4
'a' WITH TYPE CHARACTER col:10 row:4
; WITH TYPE SEMICOLON col:13 row:4
println! WITH TYPE PRINTLN col:3 row:5
( WITH TYPE LPAR col:11 row:5
" WITH TYPE QUOTES col:12 row:5
aasd WITH TYPE IDENTIFIER col:13 row:5
" WITH TYPE QUOTES col:17 row:5
) WITH TYPE RPAR col:18 row:5
; WITH TYPE SEMICOLON col:19 row:5
// WITH TYPE COMMENT col:2 row:6
if WITH TYPE IF col:2 row:7
a WITH TYPE IDENTIFIER col:5 row:7
== WITH TYPE EQUALITY col:6 row:7
1 WITH TYPE NUMBER col:8 row:7
{ WITH TYPE LBRACE col:10 row:7
// WITH TYPE COMMENT col:2 row:8
// WITH TYPE COMMENT col:2 row:9
a WITH TYPE IDENTIFIER col:3 row:10
= WITH TYPE SET col:4 row:10
5 WITH TYPE NUMBER col:5 row:10
+ WITH TYPE PLUS col:6 row:10
6 WITH TYPE NUMBER col:7 row:10
* WITH TYPE STAR col:8 row:10
3 WITH TYPE NUMBER col:9 row:10
; WITH TYPE SEMICOLON col:10 row:10
b WITH TYPE IDENTIFIER col:3 row:11
= WITH TYPE SET col:4 row:11
a WITH TYPE IDENTIFIER col:5 row:11
* WITH TYPE STAR col:6 row:11
( WITH TYPE LPAR col:7 row:11
3 WITH TYPE NUMBER col:8 row:11
+ WITH TYPE PLUS col:9 row:11
6 WITH TYPE NUMBER col:10 row:11
) WITH TYPE RPAR col:11 row:11
; WITH TYPE SEMICOLON col:12 row:11
} WITH TYPE RBRACE col:2 row:12
} WITH TYPE RBRACE col:1 row:14

------ AST ------
+-Program
  +-FunctionDefinitions
    +-FunctionIdentifier
      +-TOKEN (fn)
      +-Identifier (main)
      +-TOKEN (()
      +-ParameterList
      +-BlockExpression
        +-TOKEN ({)
        +-Statements
          +-Statement
            +-DeclarationStatement
              +-TOKEN (let)
              +-VariableDefinition
                +-Variable (a)
              +-TOKEN (=)
              +-DeclarationRightStatement
                +-BinaryExpression
                  +-LHS
                    +-PrimaryExpression
                      +-LiteralExpression
                        +-INTEGER_LITERAL (1)
          +-TOKEN (;)
          +-Statement
            +-DeclarationStatement
              +-TOKEN (let)
              +-VariableDefinition
                +-Variable (b)
              +-TOKEN (=)
              +-DeclarationRightStatement
                +-BinaryExpression
                  +-LHS
                    +-PrimaryExpression
                      +-LiteralExpression
                        +-INTEGER_LITERAL (1)
          +-TOKEN (;)
          +-Statement
            +-DeclarationStatement
              +-TOKEN (let)
              +-VariableDefinition
                +-Variable (c)
              +-TOKEN (=)
              +-DeclarationRightStatement
                +-BinaryExpression
                  +-LHS
                    +-PrimaryExpression
                      +-LiteralExpression
                        +-CHAR_STR_LITERAL ('a')
          +-TOKEN (;)
          +-Statement
            +-PRINTLN
              +-TOKEN (println!)
              +-TOKEN (()
              +-TOKEN (")
              +-TOKEN (")
              +-TOKEN ())
          +-TOKEN (;)
          +-COMMENT
            +-TOKEN (//)
          +-IfExpression
            +-TOKEN (if)
            +-ConditionStatement
              +-BinaryExpression
                +-LHS
                  +-PrimaryExpression
                    +-Variable (a)
                +-OP (==)
                +-RHS
                  +-PrimaryExpression
                    +-LiteralExpression
                      +-INTEGER_LITERAL (1)
            +-BlockExpression
              +-TOKEN ({)
              +-Statements
                +-COMMENT
                  +-TOKEN (//)
                +-COMMENT
                  +-TOKEN (//)
                +-Statement
                  +-AssignmentExpression
                    +-Variable (a)
                    +-AssignmentOperator (=)
                    +-BinaryExpression
                      +-LHS
                        +-PrimaryExpression
                          +-LiteralExpression
                            +-INTEGER_LITERAL (5)
                      +-OP (+)
                      +-RHS
                        +-LHS
                          +-PrimaryExpression
                            +-LiteralExpression
                              +-INTEGER_LITERAL (6)
                        +-OP (*)
                        +-RHS
                          +-PrimaryExpression
                            +-LiteralExpression
                              +-INTEGER_LITERAL (3)
                +-TOKEN (;)
                +-Statement
                  +-AssignmentExpression
                    +-Variable (b)
                    +-AssignmentOperator (=)
                    +-BinaryExpression
                      +-LHS
                        +-PrimaryExpression
                          +-Variable (a)
                      +-OP (*)
                      +-RHS
                        +-PrimaryExpression
                          +-TOKEN (()
                          +-BinaryExpression
                            +-LHS
                              +-PrimaryExpression
                                +-LiteralExpression
                                  +-INTEGER_LITERAL (3)
                            +-OP (+)
                            +-RHS
                              +-PrimaryExpression
                                +-LiteralExpression
                                  +-INTEGER_LITERAL (6)
                          +-TOKEN ())
                +-TOKEN (;)
              +-TOKEN (})
        +-TOKEN (})

------ TOKENS ------
fn WITH TYPE FN col:1 row:1
main WITH TYPE IDENTIFIER col:4 row:1
( WITH TYPE LPAR col:8 row:1
) WITH TYPE RPAR col:9 row:1
{ WITH TYPE LBRACE col:10 row:1
let WITH TYPE LET col:2 row:2
a WITH TYPE IDENTIFIER col:6 row:2
= WITH TYPE SET col:8 row:2
1 WITH TYPE NUMBER col:10 row:2
; WITH TYPE SEMICOLON col:11 row:2
let WITH TYPE LET col:2 row:3
b WITH TYPE IDENTIFIER col:6 row:3
= WITH TYPE SET col:8 row:3
1 WITH TYPE NUMBER col:10 row:3
; WITH TYPE SEMICOLON col:11 row:3
let WITH TYPE LET col:2 row:4
c WITH TYPE IDENTIFIER col:6 row:4
= WITH TYPE SET col:8 row:4
'a' WITH TYPE CHARACTER col:10 row:4
; WITH TYPE SEMICOLON col:13 row:4
println! WITH TYPE PRINTLN col:3 row:5
( WITH TYPE LPAR col:11 row:5
" WITH TYPE QUOTES col:12 row:5
aasd WITH TYPE IDENTIFIER col:13 row:5
" WITH TYPE QUOTES col:17 row:5
) WITH TYPE RPAR col:18 row:5
; WITH TYPE SEMICOLON col:19 row:5
// WITH TYPE COMMENT col:2 row:6
if WITH TYPE IF col:2 row:7
a WITH TYPE IDENTIFIER col:5 row:7
== WITH TYPE EQUALITY col:6 row:7
1 WITH TYPE NUMBER col:8 row:7
{ WITH TYPE LBRACE col:10 row:7
// WITH TYPE COMMENT col:2 row:8
// WITH TYPE COMMENT col:2 row:9
a WITH TYPE IDENTIFIER col:3 row:10
= WITH TYPE SET col:4 row:10
5 WITH TYPE NUMBER col:5 row:10
+ WITH TYPE PLUS col:6 row:10
6 WITH TYPE NUMBER col:7 row:10
* WITH TYPE STAR col:8 row:10
3 WITH TYPE NUMBER col:9 row:10
; WITH TYPE SEMICOLON col:10 row:10
b WITH TYPE IDENTIFIER col:3 row:11
= WITH TYPE SET col:4 row:11
a WITH TYPE IDENTIFIER col:5 row:11
* WITH TYPE STAR col:6 row:11
( WITH TYPE LPAR col:7 row:11
3 WITH TYPE NUMBER col:8 row:11
+ WITH TYPE PLUS col:9 row:11
6 WITH TYPE NUMBER col:10 row:11
) WITH TYPE RPAR col:11 row:11
; WITH TYPE SEMICOLON col:12 row:11
} WITH TYPE RBRACE col:2 row:12
} WITH TYPE RBRACE col:1 row:14

------ AST ------
+-Program
  +-FunctionDefinitions
    +-FunctionIdentifier
      +-TOKEN (fn)
      +-Identifier (main)
      +-TOKEN (()
      +-ParameterList
      +-BlockExpression
        +-TOKEN ({)
        +-Statements
          +-Statement
            +-DeclarationStatement
              +-TOKEN (let)
              +-VariableDefinition
                +-Variable (a)
              +-TOKEN (=)
              +-DeclarationRightStatement
                +-BinaryExpression
                  +-LHS
                    +-PrimaryExpression
                      +-LiteralExpression
                        +-INTEGER_LITERAL (1)
          +-TOKEN (;)
          +-Statement
            +-DeclarationStatement
              +-TOKEN (let)
              +-VariableDefinition
                +-Variable (b)
              +-TOKEN (=)
              +-DeclarationRightStatement
                +-BinaryExpression
                  +-LHS
                    +-PrimaryExpression
                      +-LiteralExpression
                        +-INTEGER_LITERAL (1)
          +-TOKEN (;)
          +-Statement
            +-DeclarationStatement
              +-TOKEN (let)
              +-VariableDefinition
                +-Variable (c)
              +-TOKEN (=)
              +-DeclarationRightStatement
                +-BinaryExpression
                  +-LHS
                    +-PrimaryExpression
                      +-LiteralExpression
                        +-CHAR_STR_LITERAL ('a')
          +-TOKEN (;)
          +-Statement
            +-PRINTLN
              +-TOKEN (println!)
              +-TOKEN (()
              +-TOKEN (")
              +-TOKEN (")
              +-TOKEN ())
          +-TOKEN (;)
          +-COMMENT
            +-TOKEN (//)
          +-IfExpression
            +-TOKEN (if)
            +-ConditionStatement
              +-BinaryExpression
                +-LHS
                  +-PrimaryExpression
                    +-Variable (a)
                +-OP (==)
                +-RHS
                  +-PrimaryExpression
                    +-LiteralExpression
                      +-INTEGER_LITERAL (1)
            +-BlockExpression
              +-TOKEN ({)
              +-Statements
                +-COMMENT
                  +-TOKEN (//)
                +-COMMENT
                  +-TOKEN (//)
                +-Statement
                  +-AssignmentExpression
                    +-Variable (a)
                    +-AssignmentOperator (=)
                    +-BinaryExpression
                      +-LHS
                        +-PrimaryExpression
                          +-LiteralExpression
                            +-INTEGER_LITERAL (5)
                      +-OP (+)
                      +-RHS
                        +-LHS
                          +-PrimaryExpression
                            +-LiteralExpression
                              +-INTEGER_LITERAL (6)
                        +-OP (*)
                        +-RHS
                          +-PrimaryExpression
                            +-LiteralExpression
                              +-INTEGER_LITERAL (3)
                +-TOKEN (;)
                +-Statement
                  +-AssignmentExpression
                    +-Variable (b)
                    +-AssignmentOperator (=)
                    +-BinaryExpression
                      +-LHS
                        +-PrimaryExpression
                          +-Variable (a)
                      +-OP (*)
                      +-RHS
                        +-PrimaryExpression
                          +-TOKEN (()
                          +-BinaryExpression
                            +-LHS
                              +-PrimaryExpression
                                +-LiteralExpression
                                  +-INTEGER_LITERAL (3)
                            +-OP (+)
                            +-RHS
                              +-PrimaryExpression
                                +-LiteralExpression
                                  +-INTEGER_LITERAL (6)
                          +-TOKEN ())
                +-TOKEN (;)
              +-TOKEN (})
        +-TOKEN (})

------ TOKENS ------
fn WITH TYPE FN col:1 row:1
main WITH TYPE IDENTIFIER col:4 row:1
( WITH TYPE LPAR col:8 row:1
) WITH TYPE RPAR col:9 row:1
{ WITH TYPE LBRACE col:10 row:1
let WITH TYPE LET col:2 row:2
a WITH TYPE IDENTIFIER col:6 row:2
= WITH TYPE SET col:8 row:2
1 WITH TYPE NUMBER col:10 row:2
; WITH TYPE SEMICOLON col:11 row:2
let WITH TYPE LET col:2 row:3
b WITH TYPE IDENTIFIER col:6 row:3
= WITH TYPE SET col:8 row:3
1 WITH TYPE NUMBER col:10 row:3
; WITH TYPE SEMICOLON col:11 row:3
let WITH TYPE LET col:2 row:4
c WITH TYPE IDENTIFIER col:6 row:4
= WITH TYPE SET col:8 row:4
'a' WITH TYPE CHARACTER col:10 row:4
; WITH TYPE SEMICOLON col:13 row:4
println! WITH TYPE PRINTLN col:3 row:5
( WITH TYPE LPAR col:11 row:5
" WITH TYPE QUOTES col:12 row:5
aasd WITH TYPE IDENTIFIER col:13 row:5
" WITH TYPE QUOTES col:17 row:5
) WITH TYPE RPAR col:18 row:5
; WITH TYPE SEMICOLON col:19 row:5
// WITH TYPE COMMENT col:2 row:6
if WITH TYPE IF col:2 row:7
a WITH TYPE IDENTIFIER col:5 row:7
== WITH TYPE EQUALITY col:6 row:7
1 WITH TYPE NUMBER col:8 row:7
{ WITH TYPE LBRACE col:10 row:7
// WITH TYPE COMMENT col:2 row:8
// WITH TYPE COMMENT col:2 row:9
a WITH TYPE IDENTIFIER col:3 row:10
= WITH TYPE SET col:4 row:10
5 WITH TYPE NUMBER col:5 row:10
+ WITH TYPE PLUS col:6 row:10
6 WITH TYPE NUMBER col:7 row:10
* WITH TYPE STAR col:8 row:10
3 WITH TYPE NUMBER col:9 row:10
; WITH TYPE SEMICOLON col:10 row:10
b WITH TYPE IDENTIFIER col:3 row:11
= WITH TYPE SET col:4 row:11
a WITH TYPE IDENTIFIER col:5 row:11
* WITH TYPE STAR col:6 row:11
( WITH TYPE LPAR col:7 row:11
3 WITH TYPE NUMBER col:8 row:11
+ WITH TYPE PLUS col:9 row:11
6 WITH TYPE NUMBER col:10 row:11
) WITH TYPE RPAR col:11 row:11
; WITH TYPE SEMICOLON col:12 row:11
} WITH TYPE RBRACE col:2 row:12
} WITH TYPE RBRACE col:1 row:14

------ AST ------
+-Program
  +-FunctionDefinitions
    +-FunctionIdentifier
      +-TOKEN (fn)
      +-Identifier (main)
      +-TOKEN (()
      +-ParameterList
      +-BlockExpression
        +-TOKEN ({)
        +-Statements
          +-Statement
            +-DeclarationStatement
              +-TOKEN (let)
              +-VariableDefinition
                +-Variable (a)
              +-TOKEN (=)
              +-DeclarationRightStatement
                +-BinaryExpression
                  +-LHS
                    +-PrimaryExpression
                      +-LiteralExpression
                        +-INTEGER_LITERAL (1)
          +-TOKEN (;)
          +-Statement
            +-DeclarationStatement
              +-TOKEN (let)
              +-VariableDefinition
                +-Variable (b)
              +-TOKEN (=)
              +-DeclarationRightStatement
                +-BinaryExpression
                  +-LHS
                    +-PrimaryExpression
                      +-LiteralExpression
                        +-INTEGER_LITERAL (1)
          +-TOKEN (;)
          +-Statement
            +-DeclarationStatement
              +-TOKEN (let)
              +-VariableDefinition
                +-Variable (c)
              +-TOKEN (=)
              +-DeclarationRightStatement
                +-BinaryExpression
                  +-LHS
                    +-PrimaryExpression
                      +-LiteralExpression
                        +-CHAR_STR_LITERAL ('a')
          +-TOKEN (;)
          +-Statement
            +-PRINTLN
              +-TOKEN (println!)
              +-TOKEN (()
              +-TOKEN (")
              +-TOKEN (")
              +-TOKEN ())
          +-TOKEN (;)
          +-COMMENT
            +-TOKEN (//)
          +-IfExpression
            +-TOKEN (if)
            +-ConditionStatement
              +-BinaryExpression
                +-LHS
                  +-PrimaryExpression
                    +-Variable (a)
                +-OP (==)
                +-RHS
                  +-PrimaryExpression
                    +-LiteralExpression
                      +-INTEGER_LITERAL (1)
            +-BlockExpression
              +-TOKEN ({)
              +-Statements
                +-COMMENT
                  +-TOKEN (//)
                +-COMMENT
                  +-TOKEN (//)
                +-Statement
                  +-AssignmentExpression
                    +-Variable (a)
                    +-AssignmentOperator (=)
                    +-BinaryExpression
                      +-LHS
                        +-PrimaryExpression
                          +-LiteralExpression
                            +-INTEGER_LITERAL (5)
                      +-OP (+)
                      +-RHS
                        +-LHS
                          +-PrimaryExpression
                            +-LiteralExpression
                              +-INTEGER_LITERAL (6)
                        +-OP (*)
                        +-RHS
                          +-PrimaryExpression
                            +-LiteralExpression
                              +-INTEGER_LITERAL (3)
                +-TOKEN (;)
                +-Statement
                  +-AssignmentExpression
                    +-Variable (b)
                    +-AssignmentOperator (=)
                    +-BinaryExpression
                      +-LHS
                        +-PrimaryExpression
                          +-Variable (a)
                      +-OP (*)
                      +-RHS
                        +-PrimaryExpression
                          +-TOKEN (()
                          +-BinaryExpression
                            +-LHS
                              +-PrimaryExpression
                                +-LiteralExpression
                                  +-INTEGER_LITERAL (3)
                            +-OP (+)
                            +-RHS
                              +-PrimaryExpression
                                +-LiteralExpression
                                  +-INTEGER_LITERAL (6)
                          +-TOKEN ())
                +-TOKEN (;)
              +-TOKEN (})
        +-TOKEN (})

------ TOKENS ------
fn WITH TYPE FN col:1 row:1
main WITH TYPE IDENTIFIER col:4 row:1
( WITH TYPE LPAR col:8 row:1
) WITH TYPE RPAR col:9 row:1
{ WITH TYPE LBRACE col:10 row:1
let WITH TYPE LET col:2 row:2
a WITH TYPE IDENTIFIER col:6 row:2
= WITH TYPE SET col:8 row:2
1 WITH TYPE NUMBER col:10 row:2
; WITH TYPE SEMICOLON col:11 row:2
let WITH TYPE LET col:2 row:3
b WITH TYPE IDENTIFIER col:6 row:3
= WITH TYPE SET col:8 row:3
1 WITH TYPE NUMBER col:10 row:3
; WITH TYPE SEMICOLON col:11 row:3
let WITH TYPE LET col:2 row:4
c WITH TYPE IDENTIFIER col:6 row:4
= WITH TYPE SET col:8 row:4
'a' WITH TYPE CHARACTER col:10 row:4
; WITH TYPE SEMICOLON col:13 row:4
println! WITH TYPE PRINTLN col:3 row:5
( WITH TYPE LPAR col:11 row:5
" WITH TYPE QUOTES col:12 row:5
aasd WITH TYPE IDENTIFIER col:13 row:5
" WITH TYPE QUOTES col:17 row:5
) WITH TYPE RPAR col:18 row:5
; WITH TYPE SEMICOLON col:19 row:5
// WITH TYPE COMMENT col:2 row:6
if WITH TYPE IF col:2 row:7
a WITH TYPE IDENTIFIER col:5 row:7
== WITH TYPE EQUALITY col:6 row:7
1 WITH TYPE NUMBER col:8 row:7
{ WITH TYPE LBRACE col:10 row:7
// WITH TYPE COMMENT col:2 row:8
// WITH TYPE COMMENT col:2 row:9
a WITH TYPE IDENTIFIER col:3 row:10
= WITH TYPE SET col:4 row:10
5 WITH TYPE NUMBER col:5 row:10
+ WITH TYPE PLUS col:6 row:10
6 WITH TYPE NUMBER col:7 row:10
* WITH TYPE STAR col:8 row:10
3 WITH TYPE NUMBER col:9 row:10
; WITH TYPE SEMICOLON col:10 row:10
b WITH TYPE IDENTIFIER col:3 row:11
= WITH TYPE SET col:4 row:11
a WITH TYPE IDENTIFIER col:5 row:11
* WITH TYPE STAR col:6 row:11
( WITH TYPE LPAR col:7 row:11
3 WITH TYPE NUMBER col:8 row:11
+ WITH TYPE PLUS col:9 row:11
6 WITH TYPE NUMBER col:10 row:11
) WITH TYPE RPAR col:11 row:11
; WITH TYPE SEMICOLON col:12 row:11
} WITH TYPE RBRACE col:2 row:12
} WITH TYPE RBRACE col:1 row:14

------ AST ------
+-Program
  +-FunctionDefinitions
    +-FunctionIdentifier
      +-TOKEN (fn)
      +-Identifier (main)
      +-TOKEN (()
      +-ParameterList
      +-BlockExpression
        +-TOKEN ({)
        +-Statements
          +-Statement
            +-DeclarationStatement
              +-TOKEN (let)
              +-VariableDefinition
                +-Variable (a)
              +-TOKEN (=)
              +-DeclarationRightStatement
                +-BinaryExpression
                  +-LHS
                    +-PrimaryExpression
                      +-LiteralExpression
                        +-INTEGER_LITERAL (1)
          +-TOKEN (;)
          +-Statement
            +-DeclarationStatement
              +-TOKEN (let)
              +-VariableDefinition
                +-Variable (b)
              +-TOKEN (=)
              +-DeclarationRightStatement
                +-BinaryExpression
                  +-LHS
                    +-PrimaryExpression
                      +-LiteralExpression
                        +-INTEGER_LITERAL (1)
          +-TOKEN (;)
          +-Statement
            +-DeclarationStatement
              +-TOKEN (let)
              +-VariableDefinition
                +-Variable (c)
              +-TOKEN (=)
              +-DeclarationRightStatement
                +-BinaryExpression
                  +-LHS
                    +-PrimaryExpression
                      +-LiteralExpression
                        +-CHAR_STR_LITERAL ('a')
          +-TOKEN (;)
          +-Statement
            +-PRINTLN
              +-TOKEN (println!)
              +-TOKEN (()
              +-TOKEN (")
              +-TOKEN (")
              +-TOKEN ())
          +-TOKEN (;)
          +-COMMENT
            +-TOKEN (//)
          +-IfExpression
            +-TOKEN (if)
            +-ConditionStatement
              +-BinaryExpression
                +-LHS
                  +-PrimaryExpression
                    +-Variable (a)
                +-OP (==)
                +-RHS
                  +-PrimaryExpression
                    +-LiteralExpression
                      +-INTEGER_LITERAL (1)
            +-BlockExpression
              +-TOKEN ({)
              +-Statements
                +-COMMENT
                  +-TOKEN (//)
                +-COMMENT
                  +-TOKEN (//)
                +-Statement
                  +-AssignmentExpression
                    +-Variable (a)
                    +-AssignmentOperator (=)
                    +-BinaryExpression
                      +-LHS
                        +-PrimaryExpression
                          +-LiteralExpression
                            +-INTEGER_LITERAL (5)
                      +-OP (+)
                      +-RHS
                        +-LHS
                          +-PrimaryExpression
                            +-LiteralExpression
                              +-INTEGER_LITERAL (6)
                        +-OP (*)
                        +-RHS
                          +-PrimaryExpression
                            +-LiteralExpression
                              +-INTEGER_LITERAL (3)
                +-TOKEN (;)
                +-Statement
                  +-AssignmentExpression
                    +-Variable (b)
                    +-AssignmentOperator (=)
                    +-BinaryExpression
                      +-LHS
                        +-PrimaryExpression
                          +-Variable (a)
                      +-OP (*)
                      +-RHS
                        +-PrimaryExpression
                          +-TOKEN (()
                          +-BinaryExpression
                            +-LHS
                              +-PrimaryExpression
                                +-LiteralExpression
                                  +-INTEGER_LITERAL (3)
                            +-OP (+)
                            +-RHS
                              +-PrimaryExpression
                                +-LiteralExpression
                                  +-INTEGER_LITERAL (6)
                          +-TOKEN ())
                +-TOKEN (;)
              +-TOKEN (})
        +-TOKEN (})

------ TOKENS ------
fn WITH TYPE FN col:1 row:1
main WITH TYPE IDENTIFIER col:4 row:1
( WITH TYPE LPAR col:8 row:1
) WITH TYPE RPAR col:9 row:1
{ WITH TYPE LBRACE col:10 row:1
let WITH TYPE LET col:2 row:2
a WITH TYPE IDENTIFIER col:6 row:2
= WITH TYPE SET col:8 row:2
1 WITH TYPE NUMBER col:10 row:2
; WITH TYPE SEMICOLON col:11 row:2
let WITH TYPE LET col:2 row:3
b WITH TYPE IDENTIFIER col:6 row:3
= WITH TYPE SET col:8 row:3
1 WITH TYPE NUMBER col:10 row:3
; WITH TYPE SEMICOLON col:11 row:3
let WITH TYPE LET col:2 row:4
c WITH TYPE IDENTIFIER col:6 row:4
= WITH TYPE SET col:8 row:4
'a' WITH TYPE CHARACTER col:10 row:4
; WITH TYPE SEMICOLON col:13 row:4
println! WITH TYPE PRINTLN col:3 row:5
( WITH TYPE LPAR col:11 row:5
" WITH TYPE QUOTES col:12 row:5
aasd WITH TYPE IDENTIFIER col:13 row:5
" WITH TYPE QUOTES col:17 row:5
) WITH TYPE RPAR col:18 row:5
; WITH TYPE SEMICOLON col:19 row:5
// WITH TYPE COMMENT col:2 row:6
if WITH TYPE IF col:2 row:7
a WITH TYPE IDENTIFIER col:5 row:7
== WITH TYPE EQUALITY col:6 row:7
1 WITH TYPE NUMBER col:8 row:7
{ WITH TYPE LBRACE col:10 row:7
// WITH TYPE COMMENT col:2 row:8
// WITH TYPE COMMENT col:2 row:9
a WITH TYPE IDENTIFIER col:3 row:10
= WITH TYPE SET col:4 row:10
5 WITH TYPE NUMBER col:5 row:10
+ WITH TYPE PLUS col:6 row:10
6 WITH TYPE NUMBER col:7 row:10
* WITH TYPE STAR col:8 row:10
3 WITH TYPE NUMBER col:9 row:10
; WITH TYPE SEMICOLON col:10 row:10
b WITH TYPE IDENTIFIER col:3 row:11
= WITH TYPE SET col:4 row:11
a WITH TYPE IDENTIFIER col:5 row:11
* WITH TYPE STAR col:6 row:11
( WITH TYPE LPAR col:7 row:11
3 WITH TYPE NUMBER col:8 row:11
+ WITH TYPE PLUS col:9 row:11
6 WITH TYPE NUMBER col:10 row:11
) WITH TYPE RPAR col:11 row:11
; WITH TYPE SEMICOLON col:12 row:11
} WITH TYPE RBRACE col:2 row:12
} WITH TYPE RBRACE col:1 row:14

------ TOKENS ------
fn WITH TYPE FN col:1 row:1
main WITH TYPE IDENTIFIER col:4 row:1
( WITH TYPE LPAR col:8 row:1
) WITH TYPE RPAR col:9 row:1
{ WITH TYPE LBRACE col:10 row:1
let WITH TYPE LET col:2 row:2
a WITH TYPE IDENTIFIER col:6 row:2
= WITH TYPE SET col:8 row:2
1 WITH TYPE NUMBER col:10 row:2
; WITH TYPE SEMICOLON col:11 row:2
let WITH TYPE LET col:2 row:3
b WITH TYPE IDENTIFIER col:6 row:3
= WITH TYPE SET col:8 row:3
1 WITH TYPE NUMBER col:10 row:3
; WITH TYPE SEMICOLON col:11 row:3
let WITH TYPE LET col:2 row:4
c WITH TYPE IDENTIFIER col:6 row:4
= WITH TYPE SET col:8 row:4
'a' WITH TYPE CHARACTER col:10 row:4
; WITH TYPE SEMICOLON col:13 row:4
println! WITH TYPE PRINTLN col:3 row:5
( WITH TYPE LPAR col:11 row:5
" WITH TYPE QUOTES col:12 row:5
aasd WITH TYPE IDENTIFIER col:13 row:5
" WITH TYPE QUOTES col:17 row:5
) WITH TYPE RPAR col:18 row:5
; WITH TYPE SEMICOLON col:19 row:5
// WITH TYPE COMMENT col:2 row:6
if WITH TYPE IF col:2 row:7
a WITH TYPE IDENTIFIER col:5 row:7
== WITH TYPE EQUALITY col:6 row:7
1 WITH TYPE NUMBER col:8 row:7
{ WITH TYPE LBRACE col:10 row:7
// WITH TYPE COMMENT col:2 row:8
// WITH TYPE COMMENT col:2 row:9
a WITH TYPE IDENTIFIER col:3 row:10
= WITH TYPE SET col:4 row:10
5 WITH TYPE NUMBER col:5 row:10
+ WITH TYPE PLUS col:6 row:10
6 WITH TYPE NUMBER col:7 row:10
* WITH TYPE STAR col:8 row:10
3 WITH TYPE NUMBER col:9 row:10
; WITH TYPE SEMICOLON col:10 row:10
b WITH TYPE IDENTIFIER col:3 row:11
= WITH TYPE SET col:4 row:11
a WITH TYPE IDENTIFIER col:5 row:11
* WITH TYPE STAR col:6 row:11
( WITH TYPE LPAR col:7 row:11
3 WITH TYPE NUMBER col:8 row:11
+ WITH TYPE PLUS col:9 row:11
6 WITH TYPE NUMBER col:10 row:11
) WITH TYPE RPAR col:11 row:11
; WITH TYPE SEMICOLON col:12 row:11
} WITH TYPE RBRACE col:2 row:12
} WITH TYPE RBRACE col:1 row:14

------ TOKENS ------
fn WITH TYPE FN col:1 row:1
main WITH TYPE IDENTIFIER col:4 row:1
( WITH TYPE LPAR col:8 row:1
) WITH TYPE RPAR col:9 row:1
{ WITH TYPE LBRACE col:10 row:1
let WITH TYPE LET col:2 row:2
a WITH TYPE IDENTIFIER col:6 row:2
= WITH TYPE SET col:8 row:2
1 WITH TYPE NUMBER col:10 row:2
; WITH TYPE SEMICOLON col:11 row:2
let WITH TYPE LET col:2 row:3
b WITH TYPE IDENTIFIER col:6 row:3
= WITH TYPE SET col:8 row:3
1 WITH TYPE NUMBER col:10 row:3
; WITH TYPE SEMICOLON col:11 row:3
let WITH TYPE LET col:2 row:4
c WITH TYPE IDENTIFIER col:6 row:4
= WITH TYPE SET col:8 row:4
'a' WITH TYPE CHARACTER col:10 row:4
; WITH TYPE SEMICOLON col:13 row:4
println! WITH TYPE PRINTLN col:3 row:5
( WITH TYPE LPAR col:11 row:5
" WITH TYPE QUOTES col:12 row:5
aasd WITH TYPE IDENTIFIER col:13 row:5
" WITH TYPE QUOTES col:17 row:5
) WITH TYPE RPAR col:18 row:5
; WITH TYPE SEMICOLON col:19 row:5
// WITH TYPE COMMENT col:2 row:6
if WITH TYPE IF col:2 row:7
a WITH TYPE IDENTIFIER col:5 row:7
== WITH TYPE EQUALITY col:6 row:7
1 WITH TYPE NUMBER col:8 row:7
{ WITH TYPE LBRACE col:10 row:7
// WITH TYPE COMMENT col:2 row:8
// WITH TYPE COMMENT col:2 row:9
a WITH TYPE IDENTIFIER col:3 row:10
= WITH TYPE SET col:4 row:10
5 WITH TYPE NUMBER col:5 row:10
+ WITH TYPE PLUS col:6 row:10
6 WITH TYPE NUMBER col:7 row:10
* WITH TYPE STAR col:8 row:10
3 WITH TYPE NUMBER col:9 row:10
; WITH TYPE SEMICOLON col:10 row:10
b WITH TYPE IDENTIFIER col:3 row:11
= WITH TYPE SET col:4 row:11
a WITH TYPE IDENTIFIER col:5 row:11
* WITH TYPE STAR col:6 row:11
( WITH TYPE LPAR col:7 row:11
3 WITH TYPE NUMBER col:8 row:11
+ WITH TYPE PLUS col:9 row:11
6 WITH TYPE NUMBER col:10 row:11
) WITH TYPE RPAR col:11 row:11
; WITH TYPE SEMICOLON col:12 row:11
} WITH TYPE RBRACE col:2 row:12
} WITH TYPE RBRACE col:1 row:14

------ TOKENS ------
fn WITH TYPE FN col:1 row:1
main WITH TYPE IDENTIFIER col:4 row:1
( WITH TYPE LPAR col:8 row:1
) WITH TYPE RPAR col:9 row:1
{ WITH TYPE LBRACE col:10 row:1
let WITH TYPE LET col:2 row:2
a WITH TYPE IDENTIFIER col:6 row:2
= WITH TYPE SET col:8 row:2
1 WITH TYPE NUMBER col:10 row:2
; WITH TYPE SEMICOLON col:11 row:2
let WITH TYPE LET col:2 row:3
b WITH TYPE IDENTIFIER col:6 row:3
= WITH TYPE SET col:8 row:3
1 WITH TYPE NUMBER col:10 row:3
; WITH TYPE SEMICOLON col:11 row:3
let WITH TYPE LET col:2 row:4
c WITH TYPE IDENTIFIER col:6 row:4
= WITH TYPE SET col:8 row:4
'a' WITH TYPE CHARACTER col:10 row:4
; WITH TYPE SEMICOLON col:13 row:4
println! WITH TYPE PRINTLN col:3 row:5
( WITH TYPE LPAR col:11 row:5
" WITH TYPE QUOTES col:12 row:5
aasd WITH TYPE IDENTIFIER col:13 row:5
" WITH TYPE QUOTES col:17 row:5
) WITH TYPE RPAR col:18 row:5
; WITH TYPE SEMICOLON col:19 row:5
// WITH TYPE COMMENT col:2 row:6
if WITH TYPE IF col:2 row:7
a WITH TYPE IDENTIFIER col:5 row:7
== WITH TYPE EQUALITY col:6 row:7
1 WITH TYPE NUMBER col:8 row:7
{ WITH TYPE LBRACE col:10 row:7
// WITH TYPE COMMENT col:2 row:8
// WITH TYPE COMMENT col:2 row:9
a WITH TYPE IDENTIFIER col:3 row:10
= WITH TYPE SET col:4 row:10
5 WITH TYPE NUMBER col:5 row:10
+ WITH TYPE PLUS col:6 row:10
6 WITH TYPE NUMBER col:7 row:10
* WITH TYPE STAR col:8 row:10
3 WITH TYPE NUMBER col:9 row:10
; WITH TYPE SEMICOLON col:10 row:10
b WITH TYPE IDENTIFIER col:3 row:11
= WITH TYPE SET col:4 row:11
a WITH TYPE IDENTIFIER col:5 row:11
* WITH TYPE STAR col:6 row:11
( WITH TYPE LPAR col:7 row:11
3 WITH TYPE NUMBER col:8 row:11
+ WITH TYPE PLUS col:9 row:11
6 WITH TYPE NUMBER col:10 row:11
) WITH TYPE RPAR col:11 row:11
; WITH TYPE SEMICOLON col:12 row:11
} WITH TYPE RBRACE col:2 row:12
} WITH TYPE RBRACE col:1 row:14

------ TOKENS ------
fn WITH TYPE FN col:1 row:1
main WITH TYPE IDENTIFIER col:4 row:1
( WITH TYPE LPAR col:8 row:1
) WITH TYPE RPAR col:9 row:1
{ WITH TYPE LBRACE col:10 row:1
let WITH TYPE LET col:2 row:2
a WITH TYPE IDENTIFIER col:6 row:2
= WITH TYPE SET col:8 row:2
1 WITH TYPE NUMBER col:10 row:2
; WITH TYPE SEMICOLON col:11 row:2
let WITH TYPE LET col:2 row:3
b WITH TYPE IDENTIFIER col:6 row:3
= WITH TYPE SET col:8 row:3
1 WITH TYPE NUMBER col:10 row:3
; WITH TYPE SEMICOLON col:11 row:3
let WITH TYPE LET col:2 row:4
c WITH TYPE IDENTIFIER col:6 row:------ TOKENS ------
fn WITH TYPE FN col:1 row:1
main WITH TYPE IDENTIFIER col:4 row:1
( WITH TYPE LPAR col:8 row:1
) WITH TYPE RPAR col:9 row:1
{ WITH TYPE LBRACE col:10 row:1
let WITH TYPE LET col:2 row:2
a WITH TYPE IDENTIFIER col:6 row:2
= WITH TYPE SET col:8 row:2
1 WITH TYPE NUMBER col:10 row:2
; WITH TYPE SEMICOLON col:11 row:2
let WITH TYPE LET col:2 row:3
b WITH TYPE IDENTIFIER col:6 row:3
= WITH TYPE SET col:8 row:3
1 WITH TYPE NUMBER col:10 row:3
; WITH TYPE SEMICOLON col:11 row:3
let WITH TYPE LET col:2 row:4
c WITH TYPE IDENTIFIER col:6 row:4
= WITH TYPE SET col:8 row:4
'a' WITH TYPE CHARACTER col:10 row:4
; WITH TYPE SEMICOLON col:13 row:4
println! WITH TYPE PRINTLN col:3 row:5
( WITH TYPE LPAR col:11 row:5
" WITH TYPE QUOTES col:12 row:5
aasd WITH TYPE IDENTIFIER col:13 row:5
" WITH TYPE QUOTES col:17 row:5
) WITH TYPE RPAR col:18 row:5
; WITH TYPE SEMICOLON col:19 row:5
// WITH TYPE COMMENT col:2 row:6
if WITH TYPE IF col:2 row:7
a WITH TYPE IDENTIFIER col:5 row:7
== WITH TYPE EQUALITY col:6 row:7
1 WITH TYPE NUMBER col:8 row:7
{ WITH TYPE LBRACE col:10 row:7
// WITH TYPE COMMENT col:2 row:8
// WITH TYPE COMMENT col:2 row:9
a WITH TYPE IDENTIFIER col:3 row:10
= WITH TYPE SET col:4 row:10
5 WITH TYPE NUMBER col:5 row:10
+ WITH TYPE PLUS col:6 row:10
6 WITH TYPE NUMBER col:7 row:10
* WITH TYPE STAR col:8 row:10
3 WITH TYPE NUMBER col:9 row:10
; WITH TYPE SEMICOLON col:10 row:10
b WITH TYPE IDENTIFIER col:3 row:11
= WITH TYPE SET col:4 row:11
a WITH TYPE IDENTIFIER col:5 row:11
* WITH TYPE STAR col:6 row:11
( WITH TYPE LPAR col:7 row:11
3 WITH TYPE NUMBER col:8 row:11
+ WITH TYPE PLUS col:9 row:11
6 WITH TYPE NUMBER col:10 row:11
) WITH TYPE RPAR col:11 row:11
; WITH TYPE SEMICOLON col:12 row:11
} WITH TYPE RBRACE col:2 row:12
} WITH TYPE RBRACE col:1 row:14

------ TOKENS ------
fn WITH TYPE FN col:1 row:1
main WITH TYPE IDENTIFIER col:4 row:1
( WITH TYPE LPAR col:8 row:1
) WITH TYPE RPAR col:9 row:1
{ WITH TYPE LBRACE col:10 row:1
let WITH TYPE LET col:2 row:2
a WITH TYPE IDENTIFIER col:6 row:2
= WITH TYPE SET col:8 row:2
1 WITH TYPE NUMBER col:10 row:2
; WITH TYPE SEMICOLON col:11 row:2
let WITH TYPE LET col:2 row:3
b WITH TYPE IDENTIFIER col:6 row:3
= WITH TYPE SET col:8 row:3
1 WITH TYPE NUMBER col:10 row:3
; WITH TYPE SEMICOLON col:11 row:3
let WITH TYPE LET col:2 row:4
c WITH TYPE IDENTIFIER col:6 row:4
= WITH TYPE SET col:8 row:4
'a' WITH TYPE CHARACTER col:10 row:4
; WITH TYPE SEMICOLON col:13 row:4
println! WITH TYPE PRINTLN col:3 row:5
( WITH TYPE LPAR col:11 row:5
" WITH TYPE QUOTES col:12 row:5
aasd WITH TYPE IDENTIFIER col:13 row:5
" WITH TYPE QUOTES col:17 row:5
) WITH TYPE RPAR col:18 row:5
; WITH TYPE SEMICOLON col:19 row:5
// WITH TYPE COMMENT col:2 row:6
if WITH TYPE IF col:2 row:7
a WITH TYPE IDENTIFIER col:5 row:7
== WITH TYPE EQUALITY col:6 row:7
1 WITH TYPE NUMBER col:8 row:7
{ WITH TYPE LBRACE col:10 row:7
// WITH TYPE COMMENT col:2 row:8
// WITH TYPE COMMENT col:2 row:9
a WITH TYPE IDENTIFIER col:3 row:10
= WITH TYPE SET col:4 row:10
5 WITH TYPE NUMBER col:5 row:10
+ WITH TYPE PLUS col:6 row:10
6 WITH TYPE NUMBER col:7 row:10
* WITH TYPE STAR col:8 row:10
3 WITH TYPE NUMBER col:9 row:10
; WITH TYPE SEMICOLON col:10 row:10
b WITH TYPE IDENTIFIER col:3 row:11
= WITH TYPE SET col:4 row:11
a WITH TYPE IDENTIFIER col:5 row:11
* WITH TYPE STAR col:6 row:11
( WITH TYPE LPAR col:7 row:11
3 WITH TYPE NUMBER col:8 row:11
+ WITH TYPE PLUS col:9 row:11
6 WITH TYPE NUMBER col:10 row:11
) WITH TYPE RPAR col:11 row:11
; WITH TYPE SEMICOLON col:12 row:11
} WITH TYPE RBRACE col:2 row:12
} WITH TYPE RBRACE col:1 row:14

------ AST ------
+-Program
  +-FunctionDefinitions
    +-FunctionDefinition
      +-TOKEN (fn)
      +-FunctionIdentifier
      +-TOKEN (()
      +-ParameterList
      +-BlockExpression
        +-TOKEN ({)
        +-Statements
          +-Statement
            +-DeclarationStatement
              +-TOKEN (let)
              +-VariableDefinition
                +-Variable (a)
              +-TOKEN (=)
              +-DeclarationRightStatement
                +-BinaryExpression
                  +-LHS
                    +-PrimaryExpression
                      +-LiteralExpression
                        +-INTEGER_LITERAL (1)
          +-TOKEN (;)
          +-Statement
            +-DeclarationStatement
              +-TOKEN (let)
              +-VariableDefinition
                +-Variable (b)
              +-TOKEN (=)
              +-DeclarationRightStatement
                +-BinaryExpression
                  +-LHS
                    +-PrimaryExpression------ TOKENS ------
fn WITH TYPE FN col:1 row:1
main WITH TYPE IDENTIFIER col:4 row:1
( WITH TYPE LPAR col:8 row:1
) WITH TYPE RPAR col:9 row:1
{ WITH TYPE LBRACE col:10 row:1
let WITH TYPE LET col:2 row:2
a WITH TYPE IDENTIFIER col:6 row:2
= WITH TYPE SET col:8 row:2
1.2 WITH TYPE DOUBLE_NUMBER col:10 row:2
; WITH TYPE SEMICOLON col:13 row:2
let WITH TYPE LET col:2 row:3
b WITH TYPE IDENTIFIER col:6 row:3
= WITH TYPE SET col:8 row:3
1.5 WITH TYPE DOUBLE_NUMBER col:10 row:3
; WITH TYPE SEMICOLON col:13 row:3
let WITH TYPE LET col:2 row:4
c WITH TYPE IDENTIFIER col:6 row:4
= WITH TYPE SET col:8 row:4
'a' WITH TYPE CHARACTER col:10 row:4
; WITH TYPE SEMICOLON col:13 row:4
println! WITH TYPE PRINTLN col:3 row:5
( WITH TYPE LPAR col:11 row:5
" WITH TYPE QUOTES col:12 row:5
aasd WITH TYPE IDENTIFIER col:13 row:5
" WITH TYPE QUOTES col:17 row:5
) WITH TYPE RPAR col:18 row:5
; WITH TYPE SEMICOLON col:19 row:5
// WITH TYPE COMMENT col:2 row:6
// WITH TYPE COMMENT col:2 row:7
// WITH TYPE COMMENT col:2 row:8
a WITH TYPE IDENTIFIER col:3 row:9
= WITH TYPE SET col:4 row:9
5.6 WITH TYPE DOUBLE_NUMBER col:5 row:9
+ WITH TYPE PLUS col:8 row:9
b WITH TYPE IDENTIFIER col:9 row:9
; WITH TYPE SEMICOLON col:10 row:9
a WITH TYPE IDENTIFIER col:3 row:10
*= WITH TYPE STAREQUAL col:4 row:10
1.5 WITH TYPE DOUBLE_NUMBER col:6 row:10
; WITH TYPE SEMICOLON col:9 row:10
b WITH TYPE IDENTIFIER col:3 row:11
= WITH TYPE SET col:4 row:11
a WITH TYPE IDENTIFIER col:5 row:11
* WITH TYPE STAR col:6 row:11
( WITH TYPE LPAR col:7 row:11
5.1 WITH TYPE DOUBLE_NUMBER col:8 row:11
+ WITH TYPE PLUS col:11 row:11
6.5 WITH TYPE DOUBLE_NUMBER col:12 row:11
) WITH TYPE RPAR col:15 row:11
; WITH TYPE SEMICOLON col:16 row:11
} WITH TYPE RBRACE col:1 row:12

------ AST ------
+-Program
  +-FunctionDefinitions
    +-FunctionDefinition
      +-TOKEN (fn)
      +-FunctionIdentifier
      +-TOKEN (()
      +-ParameterList
      +-BlockExpression
        +-TOKEN ({)
        +-Statements
          +-Statement
            +-DeclarationStatement
              +-TOKEN (let)
              +-VariableDefinition
                +-Variable (a)
              +-TOKEN (=)
              +-DeclarationRightStatement
                +-BinaryExpression
                  +-LHS
                    +-PrimaryExpression
                      +-LiteralExpression
                        +-FLOAT_LITERAL (1.2)
          +-TOKEN (;)
          +-Statement
            +-DeclarationStatement
              +-TOKEN (let)
              +-VariableDefinition
                +-Variable (b)
              +-TOKEN (=)
              +-DeclarationRightStatement
                +-BinaryExpression
                  +-LHS
                    +-PrimaryExpression
                      +-LiteralExpression
                        +-FLOAT_LITERAL (1.5)
          +-TOKEN (;)
          +-Statement
            +-DeclarationStatement
              +-TOKEN (let)
              +-VariableDefinition
                +-Variable (c)
              +-TOKEN (=)
              +-DeclarationRightStatement
                +-BinaryExpression
                  +-LHS
                    +-PrimaryExpression
                      +-LiteralExpression
                        +-CHAR_STR_LITERAL ('a')
          +-TOKEN (;)
          +-Statement
            +-PRINTLN
              +-TOKEN (println!)
              +-TOKEN (()
              +-TOKEN (")
              +-TOKEN (")
              +-TOKEN ())
          +-TOKEN (;)
          +-COMMENT
            +-TOKEN (//)
          +-COMMENT
            +-TOKEN (//)
          +-COMMENT
            +-TOKEN (//)
          +-Statement
            +-AssignmentExpression
              +-Variable (a)
              +-AssignmentOperator (=)
              +-BinaryExpression
                +-LHS
                  +-PrimaryExpression
                    +-LiteralExpression
                      +-FLOAT_LITERAL (5.6)
                +-OP (+)
                +-RHS
                  +-PrimaryExpression
                    +-Variable (b)
          +-TOKEN (;)
          +-Statement
            +-AssignmentExpression
              +-Variable (a)
              +-AssignmentOperator (*=)
              +-BinaryExpression
                +-LHS
                  +-PrimaryExpression
                    +-LiteralExpression
                      +-FLOAT_LITERAL (1.5)
          +-TOKEN (;)
          +-Statement
            +-AssignmentExpression
              +-Variable (b)
              +-AssignmentOperator (=)
              +-BinaryExpression
                +-LHS
                  +-PrimaryExpression
                    +-Variable (a)
                +-OP (*)
                +-RHS
                  +-PrimaryExpression
                    +-TOKEN (()
                    +-BinaryExpression
                      +-LHS
                        +-PrimaryExpression
                          +-LiteralExpression
                            +-FLOAT_LITERAL (5.1)
                      +-OP (+)
                      +-RHS
                        +-PrimaryExpression
                          +-LiteralExpression
                            +-FLOAT_LITERAL (6.5)
                    +-TOKEN ())
          +-TOKEN (;)
        +-TOKEN (})

