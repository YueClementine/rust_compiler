  Node.cpp
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x6c9 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x6ca 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x6cb 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x6ce 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x6fb 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x6fc 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x6ff 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x700 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x701 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x703 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x704 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x705 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x733 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x734 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x735 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x736 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x73a 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x767 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x768 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x769 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x76b 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x76c 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x76d 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x76e 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x799 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x79b 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x79c 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x7c9 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x7cb 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x7cd 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x7cf 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x7d0 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x7f9 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x7fb 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x7fd 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x7ff 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x800 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x881 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x884 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x887 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x888 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x91b 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x91c 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x91f 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x920 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xa04 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xa05 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xa08 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xa09 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xb11 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xb12 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xb86 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xb87 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xb88 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xb8a 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xc08 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xc0a 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xc0b 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xc0c 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xc0e 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xc11 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xc14 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xe48 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xe4a 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xe4b 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xe4c 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xe4e 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xe4f 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xe68 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xe99 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xe9b 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xe9c 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xe9d 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xe9f 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xea2 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xea5 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xed5 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xed7 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xed8 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xed9 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xedb 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0xede 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x100e 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x100f 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1010 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1011 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x105e 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x105f 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1060 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1063 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x108e 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x108f 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1092 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1093 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1094 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1096 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1097 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1098 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x10c4 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x10c5 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x10c6 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x10c7 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x10cb 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x10f6 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x10f7 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x10f8 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x10fa 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x10fb 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x10fc 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x10fd 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1126 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1128 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1129 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1154 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1156 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1158 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x115a 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x115b 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1182 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1184 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1186 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1188 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1189 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1202 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1205 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1208 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1209 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1290 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1291 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1294 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1295 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1365 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1366 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1369 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x136a 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1468 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1469 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x14d5 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x14d6 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x14d7 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x14d9 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1551 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1553 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1554 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1555 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1557 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x155a 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x155d 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x177a 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x177c 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x177d 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x177e 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1780 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1781 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1793 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x17c1 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x17c3 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x17c4 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x17c5 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x17c7 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x17ca 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x17cd 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x17fc 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x17fe 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x17ff 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1800 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1802 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1805 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1926 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1927 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1928 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.h(1,1): warning C4828: 文件包含在偏移 0x1929 处开始的字符，该字符在当前源字符集中无效(代码页 65001)。
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\MathExtras.h(416,31): warning C4146: 一元负运算符应用于无符号类型，结果仍为无符号类型
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\SmallVector.h(44,18): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\SmallVector.h(68,1): warning C4267: “=”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\DenseMapInfo.h(279,1): warning C4267: “return”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\StringExtras.h(72,13): warning C4146: 一元负运算符应用于无符号类型，结果仍为无符号类型
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\StringExtras.h(79,64): warning C4146: 一元负运算符应用于无符号类型，结果仍为无符号类型
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\StringExtras.h(163,3): warning C4146: 一元负运算符应用于无符号类型，结果仍为无符号类型
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(92,1): warning C4624: “llvm::detail::trivial_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::string
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::trivial_helper<T>”的引用
          with
          [
              T=std::string
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(145): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::trivial_helper<T>>”的引用
          with
          [
              T=std::string
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\SmallVector.h(315): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copyable<T>”的引用
          with
          [
              T=std::string
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\SmallVector.h(837): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorImpl<T>”的引用
          with
          [
              T=std::string
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\Error.h(987): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVector<std::string,2>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\APInt.h(1828,20): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\DerivedTypes.h(469,22): warning C4244: “初始化”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\DerivedTypes.h(500,24): warning C4244: “初始化”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\DerivedTypes.h(557,29): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\DerivedTypes.h(567,48): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\User.h(48,32): warning C4141: “inline”: 使用了多次
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\GlobalObject.h(77,12): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Function.h(348,23): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Function.h(442,23): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(92,1): warning C4624: “llvm::detail::trivial_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::unique_ptr<llvm::Module,std::default_delete<llvm::Module>>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::trivial_helper<T>”的引用
          with
          [
              T=std::unique_ptr<llvm::Module,std::default_delete<llvm::Module>>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(145): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::trivial_helper<T>>”的引用
          with
          [
              T=std::unique_ptr<llvm::Module,std::default_delete<llvm::Module>>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\SmallVector.h(315): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copyable<T>”的引用
          with
          [
              T=std::unique_ptr<llvm::Module,std::default_delete<llvm::Module>>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\SmallVector.h(837): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorImpl<T>”的引用
          with
          [
              T=std::unique_ptr<llvm::Module,std::default_delete<llvm::Module>>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ExecutionEngine\ExecutionEngine.h(134): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVector<std::unique_ptr<llvm::Module,std::default_delete<llvm::Module>>,1>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(80,1): warning C4624: “llvm::detail::copy_construction_triviality_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::Expected<llvm::orc::SymbolMap>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::copy_construction_triviality_helper<T>”的引用
          with
          [
              T=llvm::Expected<llvm::orc::SymbolMap>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(101): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::copy_construction_triviality_helper<T>>”的引用
          with
          [
              T=llvm::Expected<llvm::orc::SymbolMap>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\FunctionExtras.h(75): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copy_constructible<llvm::Expected<llvm::orc::SymbolMap>>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\FunctionExtras.h(75): message : 查看对正在编译的 别名 模板 实例化“llvm::unique_function<void (llvm::Expected<llvm::orc::SymbolMap>)>::AdjustedParamT<llvm::Expected<llvm::orc::SymbolMap>>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ExecutionEngine\Orc\Core.h(761): message : 查看对正在编译的 类 模板 实例化“llvm::unique_function<void (llvm::Expected<llvm::orc::SymbolMap>)>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(87,1): warning C4624: “llvm::detail::move_construction_triviality_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::Expected<llvm::orc::SymbolMap>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(661): message : 查看对正在编译的 类 模板 实例化“llvm::detail::move_construction_triviality_helper<T>”的引用
          with
          [
              T=llvm::Expected<llvm::orc::SymbolMap>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(112): message : 查看对正在编译的 类 模板 实例化“std::is_move_constructible<llvm::detail::move_construction_triviality_helper<T>>”的引用
          with
          [
              T=llvm::Expected<llvm::orc::SymbolMap>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\FunctionExtras.h(75): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_move_constructible<llvm::Expected<llvm::orc::SymbolMap>>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\MC\SubtargetFeature.h(60,1): warning C4146: 一元负运算符应用于无符号类型，结果仍为无符号类型
C:\doc\llvm\llvm-10.0.1.src\include\llvm\MC\SubtargetFeature.h(106,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\MC\SubtargetFeature.h(118,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\MC\SubtargetFeature.h(130,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\MC\SubtargetFeature.h(155,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Object\ObjectFile.h(573,1): warning C4267: “return”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(92,1): warning C4624: “llvm::detail::trivial_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::DILineInfo
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::trivial_helper<T>”的引用
          with
          [
              T=llvm::DILineInfo
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(145): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::trivial_helper<T>>”的引用
          with
          [
              T=llvm::DILineInfo
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\SmallVector.h(315): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copyable<T>”的引用
          with
          [
              T=llvm::DILineInfo
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\SmallVector.h(837): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorImpl<T>”的引用
          with
          [
              T=llvm::DILineInfo
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\DebugInfo\DIContext.h(82): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVector<llvm::DILineInfo,4>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\DebugInfo\DIContext.h(98,1): warning C4267: “return”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\DebugInfo\DIContext.h(173,30): warning C4146: 一元负运算符应用于无符号类型，结果仍为无符号类型
C:\doc\llvm\llvm-10.0.1.src\include\llvm\DebugInfo\DIContext.h(174,31): warning C4146: 一元负运算符应用于无符号类型，结果仍为无符号类型
C:\doc\llvm\llvm-10.0.1.src\include\llvm\DebugInfo\DIContext.h(196,1): warning C4146: 一元负运算符应用于无符号类型，结果仍为无符号类型
C:\doc\llvm\llvm-10.0.1.src\include\llvm\DebugInfo\DIContext.h(198,1): warning C4146: 一元负运算符应用于无符号类型，结果仍为无符号类型
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\InstrTypes.h(1185,25): warning C4244: “return”: 从“__int64”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\InstrTypes.h(1207,14): warning C4244: “return”: 从“__int64”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\InstrTypes.h(1234,48): warning C4244: “return”: 从“__int64”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\InstrTypes.h(1279,14): warning C4244: “return”: 从“__int64”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\InstrTypes.h(1592,23): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\InstrTypes.h(1604,23): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\InstrTypes.h(1765,25): warning C4244: “return”: 从“__int64”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\InstrTypes.h(1793,53): warning C4244: “参数”: 从“__int64”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(92,1): warning C4624: “llvm::detail::trivial_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::OperandBundleDef
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::trivial_helper<T>”的引用
          with
          [
              T=llvm::OperandBundleDef
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(145): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::trivial_helper<T>>”的引用
          with
          [
              T=llvm::OperandBundleDef
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\SmallVector.h(315): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copyable<T>”的引用
          with
          [
              T=llvm::OperandBundleDef
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\InstrTypes.h(1881): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorImpl<llvm::OperandBundleDef>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\InstrTypes.h(2127,1): warning C4267: “+=”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(114,23): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(246,23): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(378,23): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(1457,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(1466,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(1467,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(1467,1): warning C4267: “初始化”: 从“size_t”转换到“const unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(1480,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(1488,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(1489,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(1489,1): warning C4267: “初始化”: 从“size_t”转换到“const unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(3236,24): warning C4244: “参数”: 从“ptrdiff_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(92,1): warning C4624: “llvm::detail::trivial_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::SmallVector<unsigned int,8>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::trivial_helper<T>”的引用
          with
          [
              T=llvm::SmallVector<unsigned int,8>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(145): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::trivial_helper<T>>”的引用
          with
          [
              T=llvm::SmallVector<unsigned int,8>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\Optional.h(216): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copyable<T>”的引用
          with
          [
              T=llvm::SmallVector<unsigned int,8>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(3473): message : 查看对正在编译的 类 模板 实例化“llvm::Optional<llvm::SmallVector<unsigned int,8>>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(3710,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(3722,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(3723,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(3733,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(3744,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(3745,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(3971,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(3985,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(3986,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(3998,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(4011,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(4012,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(4412,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(4419,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(4453,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(4460,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\IntrinsicInst.h(484,54): warning C4244: “return”: 从“uint64_t”转换到“uint32_t”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(116,1): warning C4624: “llvm::OverflowingBinaryOperator”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(157,1): warning C4624: “llvm::PossiblyExactOperator”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(408,1): warning C4624: “llvm::FPMathOperator”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,13>”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(427): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,13>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(428,1): warning C4624: “llvm::AddOperator”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,15>”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(430): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,15>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(431,1): warning C4624: “llvm::SubOperator”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,17>”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(433): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,17>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(434,1): warning C4624: “llvm::MulOperator”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,25>”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(436): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::OverflowingBinaryOperator,25>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(437,1): warning C4624: “llvm::ShlOperator”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::PossiblyExactOperator,20>”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(440): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::PossiblyExactOperator,20>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(441,1): warning C4624: “llvm::SDivOperator”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::PossiblyExactOperator,19>”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(443): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::PossiblyExactOperator,19>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(444,1): warning C4624: “llvm::UDivOperator”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::PossiblyExactOperator,27>”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(446): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::PossiblyExactOperator,27>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(447,1): warning C4624: “llvm::AShrOperator”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::PossiblyExactOperator,26>”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(449): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::PossiblyExactOperator,26>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(450,1): warning C4624: “llvm::LShrOperator”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::Operator,39>”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(452): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::Operator,39>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(452,76): warning C4624: “llvm::ZExtOperator”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::Operator,34>”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(455): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::Operator,34>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(557,1): warning C4624: “llvm::GEPOperator”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(543,20): warning C4244: “return”: 从“std::_Iterator_traits_pointer_base<_Ty,true>::difference_type”转换到“unsigned int”，可能丢失数据
          with
          [
              _Ty=const llvm::Use
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::Operator,47>”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(560): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::Operator,47>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(585,1): warning C4624: “llvm::PtrToIntOperator”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(424,1): warning C4624: “llvm::ConcreteOperator<llvm::Operator,49>”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(588): message : 查看对正在编译的 类 模板 实例化“llvm::ConcreteOperator<llvm::Operator,49>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Operator.h(600,1): warning C4624: “llvm::BitCastOperator”: 已将析构函数隐式定义为“已删除”
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(80,1): warning C4624: “llvm::detail::copy_construction_triviality_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::Any
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::copy_construction_triviality_helper<T>”的引用
          with
          [
              T=llvm::Any
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(101): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::copy_construction_triviality_helper<T>>”的引用
          with
          [
              T=llvm::Any
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\FunctionExtras.h(75): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copy_constructible<llvm::Any>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\FunctionExtras.h(75): message : 查看对正在编译的 别名 模板 实例化“llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>::AdjustedParamT<llvm::Any>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(91): message : 查看对正在编译的 类 模板 实例化“llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>”的引用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::trivial_helper<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(145): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::trivial_helper<T>>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\SmallVector.h(315): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copyable<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\SmallVector.h(837): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorImpl<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\PassInstrumentation.h(117): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVector<llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>,4>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(87,1): warning C4624: “llvm::detail::move_construction_triviality_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::Any
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(661): message : 查看对正在编译的 类 模板 实例化“llvm::detail::move_construction_triviality_helper<T>”的引用
          with
          [
              T=llvm::Any
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(112): message : 查看对正在编译的 类 模板 实例化“std::is_move_constructible<llvm::detail::move_construction_triviality_helper<T>>”的引用
          with
          [
              T=llvm::Any
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\FunctionExtras.h(75): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_move_constructible<llvm::Any>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(92,1): warning C4624: “llvm::detail::trivial_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::BeforePassFunc>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(92,1): warning C4624: “llvm::detail::trivial_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassFunc>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::trivial_helper<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassFunc>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(145): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::trivial_helper<T>>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassFunc>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\SmallVector.h(315): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copyable<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassFunc>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\SmallVector.h(837): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorImpl<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassFunc>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\PassInstrumentation.h(118): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVector<llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassFunc>,4>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(92,1): warning C4624: “llvm::detail::trivial_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassInvalidatedFunc>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::trivial_helper<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassInvalidatedFunc>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(145): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::trivial_helper<T>>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassInvalidatedFunc>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\SmallVector.h(315): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copyable<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassInvalidatedFunc>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\SmallVector.h(837): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorImpl<T>”的引用
          with
          [
              T=llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassInvalidatedFunc>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\PassInstrumentation.h(120): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVector<llvm::unique_function<llvm::PassInstrumentationCallbacks::AfterPassInvalidatedFunc>,4>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Transforms\InstCombine\InstCombineWorklist.h(61,1): warning C4267: “参数”: 从“size_t”转换到“llvm::DenseMapBase<llvm::DenseMap<llvm::Instruction *,unsigned int,llvm::DenseMapInfo<KeyT>,llvm::detail::DenseMapPair<KeyT,ValueT>>,KeyT,ValueT,KeyInfoT,BucketT>::size_type”，可能丢失数据
          with
          [
              KeyT=llvm::Instruction *,
              ValueT=unsigned int,
              KeyInfoT=llvm::DenseMapInfo<llvm::Instruction *>,
              BucketT=llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\BitVector.h(373,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\BitVector.h(426,16): warning C4244: “=”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\BitVector.h(465,16): warning C4244: “=”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\CallSite.h(834,1): warning C4267: “return”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(92,1): warning C4624: “llvm::detail::trivial_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::TargetLibraryInfoImpl
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::trivial_helper<T>”的引用
          with
          [
              T=llvm::TargetLibraryInfoImpl
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(145): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::trivial_helper<T>>”的引用
          with
          [
              T=llvm::TargetLibraryInfoImpl
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\Optional.h(216): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copyable<T>”的引用
          with
          [
              T=llvm::TargetLibraryInfoImpl
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Analysis\TargetLibraryInfo.h(427): message : 查看对正在编译的 类 模板 实例化“llvm::Optional<llvm::TargetLibraryInfoImpl>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(92,1): warning C4624: “llvm::detail::trivial_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::TargetLibraryInfo
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::trivial_helper<T>”的引用
          with
          [
              T=llvm::TargetLibraryInfo
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(145): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::trivial_helper<T>>”的引用
          with
          [
              T=llvm::TargetLibraryInfo
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\Optional.h(216): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copyable<T>”的引用
          with
          [
              T=llvm::TargetLibraryInfo
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Analysis\TargetLibraryInfo.h(432): message : 查看对正在编译的 类 模板 实例化“llvm::Optional<llvm::TargetLibraryInfo>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\CFG.h(122,23): warning C4244: “return”: 从“__int64”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Dominators.h(117,1): warning C4267: “return”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\PredIteratorCache.h(50,1): warning C4267: “=”: 从“size_t”转换到“ValueT”，可能丢失数据
          with
          [
              ValueT=unsigned int
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\PredIteratorCache.h(61,51): warning C4244: “=”: 从“__int64”转换到“ValueT”，可能丢失数据
          with
          [
              ValueT=unsigned int
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(92,1): warning C4624: “llvm::detail::trivial_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::MemoryDependenceResults
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::trivial_helper<T>”的引用
          with
          [
              T=llvm::MemoryDependenceResults
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(145): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::trivial_helper<T>>”的引用
          with
          [
              T=llvm::MemoryDependenceResults
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\Optional.h(216): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copyable<T>”的引用
          with
          [
              T=llvm::MemoryDependenceResults
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Analysis\MemoryDependenceAnalysis.h(531): message : 查看对正在编译的 类 模板 实例化“llvm::Optional<llvm::MemoryDependenceResults>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\CallSite.h(215,14): warning C4244: “return”: 从“__int64”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\CallSite.h(212): message : 在编译 类 模板 成员函数“unsigned int llvm::CallSiteBase<llvm::Function,llvm::BasicBlock,llvm::Value,llvm::User,llvm::Use,llvm::Instruction,llvm::CallInst,llvm::InvokeInst,llvm::CallBrInst,llvm::User::op_iterator>::getArgumentNo(const llvm::Use *) const”时
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\CallSite.h(826): message : 查看对正在编译的函数 模板 实例化“unsigned int llvm::CallSiteBase<llvm::Function,llvm::BasicBlock,llvm::Value,llvm::User,llvm::Use,llvm::Instruction,llvm::CallInst,llvm::InvokeInst,llvm::CallBrInst,llvm::User::op_iterator>::getArgumentNo(const llvm::Use *) const”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\CallSite.h(674): message : 查看对正在编译的 类 模板 实例化“llvm::CallSiteBase<llvm::Function,llvm::BasicBlock,llvm::Value,llvm::User,llvm::Use,llvm::Instruction,llvm::CallInst,llvm::InvokeInst,llvm::CallBrInst,llvm::User::op_iterator>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(3194,64): warning C4244: “参数”: 从“ptrdiff_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(3191): message : 在编译 类 模板 成员函数“ConstantIntT *llvm::SwitchInst::CaseHandleImpl<const llvm::SwitchInst,ConstantIntT,const llvm::BasicBlock>::getCaseValue(void) const”时
          with
          [
              ConstantIntT=const llvm::ConstantInt
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(3407): message : 查看对正在编译的函数 模板 实例化“ConstantIntT *llvm::SwitchInst::CaseHandleImpl<const llvm::SwitchInst,ConstantIntT,const llvm::BasicBlock>::getCaseValue(void) const”的引用
          with
          [
              ConstantIntT=const llvm::ConstantInt
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(3250): message : 查看对正在编译的 类 模板 实例化“llvm::SwitchInst::CaseHandleImpl<const llvm::SwitchInst,const llvm::ConstantInt,const llvm::BasicBlock>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(3467): message : 查看对正在编译的 类 模板 实例化“llvm::SwitchInst::CaseIteratorImpl<llvm::SwitchInst::ConstCaseHandle>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(3213,30): warning C4244: “return”: 从“ptrdiff_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(3209): message : 在编译 类 模板 成员函数“unsigned int llvm::SwitchInst::CaseHandleImpl<llvm::SwitchInst,llvm::ConstantInt,llvm::BasicBlock>::getSuccessorIndex(void) const”时
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(3241): message : 查看对正在编译的函数 模板 实例化“unsigned int llvm::SwitchInst::CaseHandleImpl<llvm::SwitchInst,llvm::ConstantInt,llvm::BasicBlock>::getSuccessorIndex(void) const”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Instructions.h(3226): message : 查看对正在编译的 类 模板 实例化“llvm::SwitchInst::CaseHandleImpl<llvm::SwitchInst,llvm::ConstantInt,llvm::BasicBlock>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(92,1): warning C4624: “llvm::detail::trivial_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::_Vector_iterator<std::_Vector_val<std::_Simple_types<llvm::DomTreeNodeBase<llvm::BasicBlock> *>>>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::trivial_helper<T>”的引用
          with
          [
              T=std::_Vector_iterator<std::_Vector_val<std::_Simple_types<llvm::DomTreeNodeBase<llvm::BasicBlock> *>>>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(145): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::trivial_helper<T>>”的引用
          with
          [
              T=std::_Vector_iterator<std::_Vector_val<std::_Simple_types<llvm::DomTreeNodeBase<llvm::BasicBlock> *>>>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\Optional.h(216): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copyable<T>”的引用
          with
          [
              T=std::_Vector_iterator<std::_Vector_val<std::_Simple_types<llvm::DomTreeNodeBase<llvm::BasicBlock> *>>>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility(327): message : 查看对正在编译的 类 模板 实例化“llvm::Optional<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_Ty>>>>”的引用
          with
          [
              _Ty=llvm::DomTreeNodeBase<llvm::BasicBlock> *
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector(1696): message : 查看对正在编译的 类 模板 实例化“std::pair<llvm::DomTreeNodeBase<llvm::BasicBlock> *,llvm::Optional<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_Ty>>>>>”的引用
          with
          [
              _Ty=llvm::DomTreeNodeBase<llvm::BasicBlock> *
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector(1686): message : 在编译 类 模板 成员函数“void std::vector<std::pair<llvm::DomTreeNodeBase<llvm::BasicBlock> *,llvm::Optional<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_Ty>>>>>,std::allocator<std::pair<llvm::DomTreeNodeBase<llvm::BasicBlock> *,llvm::Optional<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_Ty>>>>>>>::_Tidy(void) noexcept”时
          with
          [
              _Ty=llvm::DomTreeNodeBase<llvm::BasicBlock> *
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector(673): message : 查看对正在编译的函数 模板 实例化“void std::vector<std::pair<llvm::DomTreeNodeBase<llvm::BasicBlock> *,llvm::Optional<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_Ty>>>>>,std::allocator<std::pair<llvm::DomTreeNodeBase<llvm::BasicBlock> *,llvm::Optional<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_Ty>>>>>>>::_Tidy(void) noexcept”的引用
          with
          [
              _Ty=llvm::DomTreeNodeBase<llvm::BasicBlock> *
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\DepthFirstIterator.h(98): message : 查看对正在编译的 类 模板 实例化“std::vector<std::pair<llvm::DomTreeNodeBase<llvm::BasicBlock> *,llvm::Optional<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_Ty>>>>>,std::allocator<std::pair<llvm::DomTreeNodeBase<llvm::BasicBlock> *,llvm::Optional<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_Ty>>>>>>>”的引用
          with
          [
              _Ty=llvm::DomTreeNodeBase<llvm::BasicBlock> *
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Dominators.h(220): message : 查看对正在编译的 类 模板 实例化“llvm::df_iterator<Node *,llvm::df_iterator_default_set<Node *,8>,false,llvm::GraphTraits<llvm::DomTreeNode*>>”的引用
          with
          [
              Node=llvm::DomTreeNode
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\DenseMap.h(362,24): warning C4244: “return”: 从“uint64_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\DenseMap.h(356): message : 在编译 类 模板 成员函数“unsigned int llvm::DenseMapBase<llvm::DenseMap<llvm::Instruction *,unsigned int,llvm::DenseMapInfo<KeyT>,llvm::detail::DenseMapPair<KeyT,ValueT>>,KeyT,ValueT,KeyInfoT,BucketT>::getMinBucketToReserveForEntries(unsigned int)”时
          with
          [
              KeyT=llvm::Instruction *,
              ValueT=unsigned int,
              KeyInfoT=llvm::DenseMapInfo<llvm::Instruction *>,
              BucketT=llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\DenseMap.h(104): message : 查看对正在编译的函数 模板 实例化“unsigned int llvm::DenseMapBase<llvm::DenseMap<llvm::Instruction *,unsigned int,llvm::DenseMapInfo<KeyT>,llvm::detail::DenseMapPair<KeyT,ValueT>>,KeyT,ValueT,KeyInfoT,BucketT>::getMinBucketToReserveForEntries(unsigned int)”的引用
          with
          [
              KeyT=llvm::Instruction *,
              ValueT=unsigned int,
              KeyInfoT=llvm::DenseMapInfo<llvm::Instruction *>,
              BucketT=llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\DenseMap.h(685): message : 查看对正在编译的 类 模板 实例化“llvm::DenseMapBase<llvm::DenseMap<llvm::Instruction *,unsigned int,llvm::DenseMapInfo<KeyT>,llvm::detail::DenseMapPair<KeyT,ValueT>>,KeyT,ValueT,KeyInfoT,BucketT>”的引用
          with
          [
              KeyT=llvm::Instruction *,
              ValueT=unsigned int,
              KeyInfoT=llvm::DenseMapInfo<llvm::Instruction *>,
              BucketT=llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Transforms\InstCombine\InstCombineWorklist.h(28): message : 查看对正在编译的 类 模板 实例化“llvm::DenseMap<llvm::Instruction *,unsigned int,llvm::DenseMapInfo<KeyT>,llvm::detail::DenseMapPair<KeyT,ValueT>>”的引用
          with
          [
              KeyT=llvm::Instruction *,
              ValueT=unsigned int
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\Allocator.h(420,40): warning C4244: “参数”: 从“__int64”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\Allocator.h(417): message : 在编译 类 模板 成员函数“void llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096,4096>::DeallocateSlabs(void **,void **)”时
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\Allocator.h(209): message : 查看对正在编译的函数 模板 实例化“void llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096,4096>::DeallocateSlabs(void **,void **)”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\Allocator.h(447): message : 查看对正在编译的 类 模板 实例化“llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096,4096>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\Allocator.h(497): message : 查看对正在编译的 类 模板 实例化“llvm::SpecificBumpPtrAllocator<T>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(92,1): warning C4624: “llvm::detail::trivial_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>,std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(630): message : 查看对正在编译的 类 模板 实例化“llvm::detail::trivial_helper<T>”的引用
          with
          [
              T=std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>,std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(145): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<llvm::detail::trivial_helper<T>>”的引用
          with
          [
              T=std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>,std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\DenseMap.h(123): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_copyable<ValueT>”的引用
          with
          [
              ValueT=std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>,std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\DenseMap.h(110): message : 在编译 类 模板 成员函数“void llvm::DenseMapBase<llvm::DenseMap<NodeT *,std::unique_ptr<llvm::DomTreeNodeBase<NodeT>,std::default_delete<llvm::DomTreeNodeBase<NodeT>>>,llvm::DenseMapInfo<KeyT>,llvm::detail::DenseMapPair<KeyT,ValueT>>,KeyT,ValueT,KeyInfoT,BucketT>::clear(void)”时
          with
          [
              NodeT=llvm::BasicBlock,
              KeyT=llvm::BasicBlock *,
              ValueT=std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>,std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>>,
              KeyInfoT=llvm::DenseMapInfo<llvm::BasicBlock *>,
              BucketT=llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>,std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\GenericDomTree.h(761): message : 查看对正在编译的函数 模板 实例化“void llvm::DenseMapBase<llvm::DenseMap<NodeT *,std::unique_ptr<llvm::DomTreeNodeBase<NodeT>,std::default_delete<llvm::DomTreeNodeBase<NodeT>>>,llvm::DenseMapInfo<KeyT>,llvm::detail::DenseMapPair<KeyT,ValueT>>,KeyT,ValueT,KeyInfoT,BucketT>::clear(void)”的引用
          with
          [
              NodeT=llvm::BasicBlock,
              KeyT=llvm::BasicBlock *,
              ValueT=std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>,std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>>,
              KeyInfoT=llvm::DenseMapInfo<llvm::BasicBlock *>,
              BucketT=llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>,std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\DenseMap.h(685): message : 查看对正在编译的 类 模板 实例化“llvm::DenseMapBase<llvm::DenseMap<NodeT *,std::unique_ptr<llvm::DomTreeNodeBase<NodeT>,std::default_delete<llvm::DomTreeNodeBase<NodeT>>>,llvm::DenseMapInfo<KeyT>,llvm::detail::DenseMapPair<KeyT,ValueT>>,KeyT,ValueT,KeyInfoT,BucketT>”的引用
          with
          [
              NodeT=llvm::BasicBlock,
              KeyT=llvm::BasicBlock *,
              ValueT=std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>,std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>>,
              KeyInfoT=llvm::DenseMapInfo<llvm::BasicBlock *>,
              BucketT=llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>,std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\GenericDomTree.h(244): message : 查看对正在编译的 类 模板 实例化“llvm::DenseMap<NodeT *,std::unique_ptr<llvm::DomTreeNodeBase<NodeT>,std::default_delete<llvm::DomTreeNodeBase<NodeT>>>,llvm::DenseMapInfo<KeyT>,llvm::detail::DenseMapPair<KeyT,ValueT>>”的引用
          with
          [
              NodeT=llvm::BasicBlock,
              KeyT=llvm::BasicBlock *,
              ValueT=std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>,std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\IR\Dominators.h(36): message : 查看对正在编译的 类 模板 实例化“llvm::DominatorTreeBase<NodeT,false>”的引用
          with
          [
              NodeT=llvm::BasicBlock
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\SmallVector.h(253,1): warning C4267: “=”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\SmallVector.h(233): message : 在编译 类 模板 成员函数“void llvm::SmallVectorTemplateBase<T,false>::grow(size_t)”时
          with
          [
              T=std::string
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\SmallVector.h(220): message : 查看对正在编译的函数 模板 实例化“void llvm::SmallVectorTemplateBase<T,false>::grow(size_t)”的引用
          with
          [
              T=std::string
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\SmallVector.h(315): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorTemplateBase<T,false>”的引用
          with
          [
              T=std::string
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\SmallVector.h(837): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVectorImpl<T>”的引用
          with
          [
              T=std::string
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\Error.h(987): message : 查看对正在编译的 类 模板 实例化“llvm::SmallVector<std::string,2>”的引用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility(246,1): warning C4244: “初始化”: 从“_Ty”转换到“_Ty2”，可能丢失数据
          with
          [
              _Ty=llvm::orc::VModuleKey
          ]
          and
          [
              _Ty2=unsigned int
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Transforms\InstCombine\InstCombineWorklist.h(44): message : 查看对正在编译的函数 模板 实例化“std::pair<KeyT,ValueT>::pair<llvm::Instruction*,unsigned __int64,0>(std::pair<llvm::Instruction *,unsigned __int64> &&) noexcept”的引用
          with
          [
              KeyT=llvm::Instruction *,
              ValueT=unsigned int
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Transforms\InstCombine\InstCombineWorklist.h(44): message : 查看对正在编译的函数 模板 实例化“std::pair<KeyT,ValueT>::pair<llvm::Instruction*,unsigned __int64,0>(std::pair<llvm::Instruction *,unsigned __int64> &&) noexcept”的引用
          with
          [
              KeyT=llvm::Instruction *,
              ValueT=unsigned int
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(87,1): warning C4624: “llvm::detail::move_construction_triviality_helper<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=llvm::orc::LegacyRTDyldObjectLinkingLayer::ConcreteLinkedObject<std::shared_ptr<llvm::RuntimeDyld::MemoryManager>>::getSymbolMaterializer::<lambda_ddc9b4854947c05fdcc1f2d56323ad1f>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(661): message : 查看对正在编译的 类 模板 实例化“llvm::detail::move_construction_triviality_helper<T>”的引用
          with
          [
              T=llvm::orc::LegacyRTDyldObjectLinkingLayer::ConcreteLinkedObject<std::shared_ptr<llvm::RuntimeDyld::MemoryManager>>::getSymbolMaterializer::<lambda_ddc9b4854947c05fdcc1f2d56323ad1f>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(112): message : 查看对正在编译的 类 模板 实例化“std::is_move_constructible<llvm::detail::move_construction_triviality_helper<T>>”的引用
          with
          [
              T=llvm::orc::LegacyRTDyldObjectLinkingLayer::ConcreteLinkedObject<std::shared_ptr<llvm::RuntimeDyld::MemoryManager>>::getSymbolMaterializer::<lambda_ddc9b4854947c05fdcc1f2d56323ad1f>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\FunctionExtras.h(233): message : 查看对正在编译的 类 模板 实例化“llvm::is_trivially_move_constructible<CallableT>”的引用
          with
          [
              CallableT=llvm::orc::LegacyRTDyldObjectLinkingLayer::ConcreteLinkedObject<std::shared_ptr<llvm::RuntimeDyld::MemoryManager>>::getSymbolMaterializer::<lambda_ddc9b4854947c05fdcc1f2d56323ad1f>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ExecutionEngine\Orc\RTDyldObjectLinkingLayer.h(281): message : 查看对正在编译的函数 模板 实例化“llvm::unique_function<llvm::Expected<llvm::JITTargetAddress> (void)>::unique_function<llvm::orc::LegacyRTDyldObjectLinkingLayer::ConcreteLinkedObject<std::shared_ptr<llvm::RuntimeDyld::MemoryManager>>::getSymbolMaterializer::<lambda_ddc9b4854947c05fdcc1f2d56323ad1f>>(CallableT)”的引用
          with
          [
              CallableT=llvm::orc::LegacyRTDyldObjectLinkingLayer::ConcreteLinkedObject<std::shared_ptr<llvm::RuntimeDyld::MemoryManager>>::getSymbolMaterializer::<lambda_ddc9b4854947c05fdcc1f2d56323ad1f>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ExecutionEngine\Orc\RTDyldObjectLinkingLayer.h(274): message : 查看对正在编译的函数 模板 实例化“llvm::unique_function<llvm::Expected<llvm::JITTargetAddress> (void)>::unique_function<llvm::orc::LegacyRTDyldObjectLinkingLayer::ConcreteLinkedObject<std::shared_ptr<llvm::RuntimeDyld::MemoryManager>>::getSymbolMaterializer::<lambda_ddc9b4854947c05fdcc1f2d56323ad1f>>(CallableT)”的引用
          with
          [
              CallableT=llvm::orc::LegacyRTDyldObjectLinkingLayer::ConcreteLinkedObject<std::shared_ptr<llvm::RuntimeDyld::MemoryManager>>::getSymbolMaterializer::<lambda_ddc9b4854947c05fdcc1f2d56323ad1f>
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ExecutionEngine\Orc\RTDyldObjectLinkingLayer.h(273): message : 在编译 类 模板 成员函数“llvm::JITSymbol::GetAddressFtor llvm::orc::LegacyRTDyldObjectLinkingLayer::ConcreteLinkedObject<std::shared_ptr<llvm::RuntimeDyld::MemoryManager>>::getSymbolMaterializer(std::string)”时
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits(359): message : 查看对正在编译的 类 模板 实例化“llvm::orc::LegacyRTDyldObjectLinkingLayer::ConcreteLinkedObject<std::shared_ptr<llvm::RuntimeDyld::MemoryManager>>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(87): message : 查看指向正在编译的变量模板“const bool is_convertible_v<llvm::orc::LegacyRTDyldObjectLinkingLayer::ConcreteLinkedObject<std::shared_ptr<llvm::RuntimeDyld::MemoryManager> > *,llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject *>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ExecutionEngine\Orc\RTDyldObjectLinkingLayer.h(404): message : 查看对正在编译的 类 模板 实例化“std::is_assignable<std::default_delete<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> &,std::default_delete<llvm::orc::LegacyRTDyldObjectLinkingLayer::ConcreteLinkedObject<std::shared_ptr<llvm::RuntimeDyld::MemoryManager>>>>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\type_traits.h(87): message : 查看指向正在编译的变量模板“const bool conjunction_v<std::negation<std::is_array<llvm::orc::LegacyRTDyldObjectLinkingLayer::ConcreteLinkedObject<std::shared_ptr<llvm::RuntimeDyld::MemoryManager> > > >,std::is_assignable<std::default_delete<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> &,std::default_delete<llvm::orc::LegacyRTDyldObjectLinkingLayer::ConcreteLinkedObject<std::shared_ptr<llvm::RuntimeDyld::MemoryManager> > > >,std::is_convertible<llvm::orc::LegacyRTDyldObjectLinkingLayer::ConcreteLinkedObject<std::shared_ptr<llvm::RuntimeDyld::MemoryManager> > *,llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject *> >”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\Format.h(97,12): warning C4996: '_snprintf': This function or variable may be unsafe. Consider using _snprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\Format.h(109): message : 查看对正在编译的函数 模板 实例化“int llvm::format_object<uint32_t>::snprint_tuple<0>(char *,unsigned int,std::integer_sequence<size_t,0>) const”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\Format.h(110): message : 查看对正在编译的函数 模板 实例化“int llvm::format_object<uint32_t>::snprint_tuple<0>(char *,unsigned int,std::integer_sequence<size_t,0>) const”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\Format.h(109): message : 在编译 类 模板 成员函数“int llvm::format_object<uint32_t>::snprint(char *,unsigned int) const”时
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Object\SymbolicFile.h(50): message : 查看对正在编译的 类 模板 实例化“llvm::format_object<uint32_t>”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\Allocator.h(403,1): warning C4267: “参数”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\Allocator.h(402): message : 在编译 类 模板 成员函数“void llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096,4096>::StartNewSlab(void)”时
C:\doc\llvm\llvm-10.0.1.src\include\llvm\Support\Allocator.h(259): message : 查看对正在编译的函数 模板 实例化“void llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096,4096>::StartNewSlab(void)”的引用
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\BitmaskEnum.h(84,51): warning C4244: “return”: 从“uint64_t”转换到“std::_Underlying_type<_Ty,true>::type”，可能丢失数据
          with
          [
              _Ty=llvm::JITSymbolFlags::FlagNames
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\BitmaskEnum.h(93): message : 查看对正在编译的函数 模板 实例化“std::_Underlying_type<_Ty,true>::type llvm::BitmaskEnumDetail::Mask<E>(void)”的引用
          with
          [
              _Ty=llvm::JITSymbolFlags::FlagNames,
              E=llvm::JITSymbolFlags::FlagNames
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ADT\BitmaskEnum.h(112): message : 查看对正在编译的函数 模板 实例化“std::_Underlying_type<_Ty,true>::type llvm::BitmaskEnumDetail::Underlying<E>(E)”的引用
          with
          [
              _Ty=llvm::JITSymbolFlags::FlagNames,
              E=llvm::JITSymbolFlags::FlagNames
          ]
C:\doc\llvm\llvm-10.0.1.src\include\llvm\ExecutionEngine\JITSymbol.h(123): message : 查看对正在编译的函数 模板 实例化“E llvm::BitmaskEnumDetail::operator &<llvm::JITSymbolFlags::FlagNames,void>(E,E)”的引用
          with
          [
              E=llvm::JITSymbolFlags::FlagNames
          ]
C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\CompilerForRust\Node.cpp(983): warning C4715: “Node::codegen”: 不是所有的控件路径都返回值
LINK : warning LNK4044: 无法识别的选项“/utf-8”；已忽略
LINK : warning LNK4044: 无法识别的选项“/utf-8”；已忽略
  CompilerForRust.vcxproj -> C:\Users\yue\Documents\GitHub\rust_compiler\CompilerForRust\x64\Debug\CompilerForRust.exe
